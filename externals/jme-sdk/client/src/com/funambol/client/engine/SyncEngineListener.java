/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2009 Funambol, Inc.
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 * 
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

package com.funambol.client.engine;

import java.util.Vector;
import java.util.Enumeration;

import com.funambol.client.source.AppSyncSource;
import com.funambol.syncml.spds.SyncConfig;
import com.funambol.syncml.spds.SyncException;

/**
 * This interface is a listener for the SyncEngine which generates several
 * notification on the status of the synchronization.
 * These events are a complement to the ones generated by the SyncManager, and
 * they are meant to be "global" and not specific to one sync source. The
 * SyncManager notifies the sync status for a specific sync source (as it
 * synchronizes one source at a time) while the SyncEngine has an interface that
 * allows the synchronization of multiple sources. The global events (not source
 * specific) are therefore generated by the SyncEngine.
 */
public interface SyncEngineListener {
    /**
     * A sync is about to begin. This is always invoked when the SyncEngine
     * starts a synchronization
     */
    public void beginSync();

    /**
     * Sync cannot be performed because the user did not set his credentials
     */
    public void noCredentials();

    /**
     * Sync cannot be performed because no sources are selected
     */
    public void noSources();

    /**
     * Sync cannot be performed because connections cannot be established
     */
    public void noConnection();

    /**
     * Sync cannot be performed because there is no network coverage
     */
    public void noSignal();

    /**
     * Invoked if there are many items to delete. "Many" means more than 1/3 of
     * the total number of items. If the method returns true the sync proceeds,
     * otherwise it is aborted (for this source).
     *
     * @return true if the sync shall proceed
     */
    public boolean confirmDeletes(Enumeration sources);

    /**
     * A sync for the given sources is about to begin. 
     */
    public boolean syncStarted(Vector appSources);

    /**
     * Invoked at the end of the synchronization (always invoked, regardless of
     * success or failure)
     */
    public void syncEnded();

    /**
     * This method allows the client to stop the sync. When true is returned,
     * then the SyncEngine interrupts the sync
     */
    public boolean isCancelled();

    /**
     * This method notifies that a new source is about to begin its
     * synchronization.
     */
    public void sourceStarted(AppSyncSource appSource);

    /**
     * This method notifies that a source has completed its synchronization
     */
    public void sourceEnded(AppSyncSource appSource);

    /**
     * This method is invoked when the synchronization of a source throws an
     * exception. The exception is provided so the upper layers can decide if an
     * error message shall be shown.
     */
    public void sourceFailed(AppSyncSource appSource, SyncException se);

    /**
     * The synchronizaion has been completed for the given sources.
     *
     * @param appSources the list of sources being synchronized
     * @param failure is true iff at least one source failed
     */
    public void endSync(Vector appSources, boolean failures);
}

