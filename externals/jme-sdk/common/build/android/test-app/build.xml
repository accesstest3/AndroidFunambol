<?xml version="1.0" ?>
<project name="FunambolTest" default="debug">
    
    <property file="build.properties"/>

    <!-- Preset SDK Version. Valid values are "1.0", "1.1", and "1.5" -->     
    <property name="android.sdk.version" value="1.1"/>

    <!-- Platform specific SDK location -->
    <condition property="sdk-folder-platform" value="${sdk-folder}">
      <equals arg1="${android.sdk.version}" arg2="1.0"/>
    </condition>

    <condition property="sdk-folder-platform" value="${sdk-folder}/platforms/android-1.1">
      <equals arg1="${android.sdk.version}" arg2="1.1"/>
    </condition>

    <condition property="sdk-folder-platform" value="${sdk-folder}/platforms/android-1.5">
      <equals arg1="${android.sdk.version}" arg2="1.5"/>
    </condition>
    
    <condition property="sdk-folder-platform" value="${sdk-folder}/platforms/android-2.0">
      <equals arg1="${android.sdk.version}" arg2="2.0"/>
    </condition>

    <!-- Preset tools location -->
    <property name="android-tools" value="${sdk-folder}/tools"/>
    <property name="android-tools-platform" value="${sdk-folder-platform}/tools"/>

    <!-- The intermediates directory -->
    <!-- Eclipse uses "bin" for its own output, so we do the same. -->
    <property name="outdir" value="bin" />
    
    <!-- Input directories -->
    <property name="srcdir" value="src" />

    <property name="external-libs" value="${basedir}/external-libs" />

    <!-- Output directories -->
    <property name="outdir-classes" value="${outdir}/classes" />
    <condition property="outdir-classes-ospath"
            value="${basedir}\${outdir-classes}"
            else="${basedir}/${outdir-classes}" >
        <os family="windows"/>
    </condition>

    <!-- Application Package Name -->
    <property name="application-package" value="com.funambol.android.test" />
    
    <!-- Create R.java in the source directory -->
    <property name="outdir-r" value="src" />

    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${outdir}/${dex-file}" />
    <condition property="intermediate-dex-ospath"
            value="${basedir}\${intermediate-dex}"
            else="${basedir}/${intermediate-dex}" >
        <os family="windows"/>
    </condition>

    <!-- The final package file to generate -->
    <property name="resources-package" value="${outdir}/${ant.project.name}.ap_" />
    <condition property="resources-package-ospath"
            value="${basedir}\${resources-package}"
            else="${basedir}/${resources-package}" >
        <os family="windows"/>
    </condition>

    <property name="out-debug-package" value="${outdir}/${ant.project.name}-debug.apk" />
    <condition property="out-debug-package-ospath"
            value="${basedir}\${out-debug-package}"
            else="${basedir}/${out-debug-package}" >
        <os family="windows"/>
    </condition>

    <!-- Tools -->
    <condition property="emulator" value="${android-tools}/emulator.exe" else="${android-tools}/emulator" >
        <os family="windows"/>
    </condition>
    <condition property="aapt" value="${android-tools-platform}/aapt.exe" else="${android-tools-platform}/aapt" >
        <os family="windows"/>
    </condition>
    <condition property="aidl" value="${android-tools-platform}/aidl.exe" else="${android-tools-platform}/aidl" >
        <os family="windows"/>
    </condition>
    <condition property="adb" value="${android-tools}/adb.exe" else="${android-tools}/adb" >
        <os family="windows"/>
    </condition>
    <condition property="dx" value="${android-tools-platform}/dx.bat" else="${android-tools-platform}/dx" >
        <os family="windows"/>
    </condition>
    <condition property="apk-builder" value="${android-tools}/apkbuilder.bat" else="${android-tools}/apkbuilder" >
        <os family="windows"/>
    </condition>

    <property name="android-jar" value="${sdk-folder-platform}/android.jar" />

    <!-- Rules -->

    <!-- Create the output directories if they don't exist yet. -->
    <target name="dirs">
        <echo>Creating output directories if needed...</echo>
        <mkdir dir="${outdir}" />
        <mkdir dir="${outdir-classes}" />
    </target>

    <!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="dirs">
        <echo>Generating R.java / Manifest.java from the resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${outdir-r}" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>

    <!-- Compile this project's .java files into .class files. -->
    <target name="compile" depends="dirs, resource-src">
        <javac encoding="ascii" target="1.5" debug="true" extdirs=""
                srcdir="${srcdir}"
                destdir="${outdir-classes}"
                bootclasspath="${android-jar}">
            <classpath>
                <fileset dir="${external-libs}" includes="*.jar"/>
            </classpath>
         </javac>
    </target>
    
    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex" depends="compile">
        <echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>
        <apply executable="${dx}" failonerror="true" parallel="true">
            <arg value="--dex" />
            <arg value="--output=${intermediate-dex-ospath}" />
            <arg path="${outdir-classes-ospath}" />
            <fileset dir="${external-libs}" includes="*.jar"/>
        </apply>
    </target>

    <!-- Invoke the proper target depending on whether or not
         an assets directory is present. -->
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
         only when the assets dir exists. -->
    <target name="package-res">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- Package the application and sign it with a debug key.
		 This is the default target when building. It is used for debug. -->
    <target name="debug" depends="dex, package-res">
        <echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-debug-package-ospath}" />
            <arg value="-z" />
            <arg value="${resources-package-ospath}" />
            <arg value="-f" />
            <arg value="${intermediate-dex-ospath}" />
            <arg value="-rf" />
            <arg value="${srcdir}" />
            <arg value="-rj" />
            <arg value="${external-libs}" />
        </exec>
    </target>

    <!-- Install the package on the default emulator -->
    <target name="install">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>

    <!-- Uinstall the package from the default emulator -->
    <target name="uninstall">
        <echo>Uninstalling ${application-package} from the default emulator...</echo>
        <exec executable="${adb}" failonerror="false">
            <arg value="uninstall" />
            <arg value="${application-package}" />
        </exec>
    </target>
    
    <target name="run-test" depends="uninstall,install">
        <exec executable="${adb}" failonerror="true">
            <arg line="shell am instrument -w ${application-package}/android.test.InstrumentationTestRunner" />
        </exec>
    </target>
    
    <target name="clean">
        <delete dir="${outdir}"/>
        <delete dir="${external-libs}"/>
    </target>

</project>
